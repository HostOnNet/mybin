#!/bin/bash

# https://raw.githubusercontent.com/giovtorres/kvm-install-vm/master/kvm-install-vm

prog=$0

function usage {
    echo "usage: $prog [OPTIONS] [-n vmname] [-r vmname]"
    echo ""
    echo "OPTIONS"
    echo "  -c          Number of vCPUs     (default: 1)"
    echo "  -f          CPU Model / Feature (default: host)"
    echo "  -m          Memory Size (MB)    (default: 1024)"
    echo "  -t          Linux Distribution  (default: ubuntu)"
    echo "  -k          SSH Public Key      (default: $HOME/.ssh/id_rsa.pub)"
    echo "  -b          Bridge              (default: virbr0)"
    echo "  -h          Display help"
    echo "  -i          Custom QCOW2 Image"
    echo "  -n vmname   Name of VM to create"
    echo "  -M mac      Mac address         (default: None)"
    echo ""
    echo "DISTRIBUTIONS"
    echo " - centos7"
    echo " - centos6"
    echo " - ubuntu"
    echo ""
    echo "EXAMPLES"
    echo ""
    echo "Create VM with default params:"
    echo "  $prog -n foo"
    echo ""
    echo "Create VM with custom params:"
    echo "  $prog -c 2 -m 2048 -d 20 -n foo"
    echo ""
}

# Reset OPTIND
OPTIND=1

#--------------------------------------------------
# Defaults are set here.
# Override using command line arguments.
#--------------------------------------------------

CPUS=1                          # Number of virtual CPUs
FEATURE=host                    # Use host cpu features to the guest
MEMORY=1024                     # Amount of RAM in MB
BRIDGE=virbr0                   # Hypervisor bridge
PUBKEY=${HOME}/.ssh/id_rsa.pub  # SSH public key
DISTRO="ubuntu"                 # Distribution
MACADDRESS=                     # MAC Address

if [ `id -u` -ne 0 ]; then
    IMAGEDIR=${HOME}/virt/images    # Directory to store images
    VMDIR=${HOME}/virt/vm
else
    IMAGEDIR=/home/virt/images    # Directory to store images
    VMDIR=/home/virt/vm
fi


#--------------------------------------------------
# Parse command line arguments
#--------------------------------------------------

while getopts ":c:f:m:d:t:k:b:n:r:i:M:h" opt; do
    case "$opt" in
        c   ) CPUS="${OPTARG}" ;;
        f   ) FEATURE="${OPTARG}" ;;
        m   ) MEMORY="${OPTARG}" ;;
        t   ) DISTRO="${OPTARG}" ;;
        n   ) VMNAME="${OPTARG}" ;;
        k   ) PUBKEY="${OPTARG}" ;;
        b   ) BRIDGE="${OPTARG}" ;;
        i   ) IMAGE="${OPTARG}" ;;
        r   ) VMDEL="${OPTARG}" ;;
        M   ) MACADDRESS="${OPTARG}" ;;
        h|* ) usage; exit 1 ;;
    esac
done

shift $((OPTIND-1))

# VMNAME must be set
if [ -z "${VMNAME+x}" ]
then
    echo "You must specify a name for the VM with -n. Use -h to see usage."
    exit 2
fi

function fetch_images {
    case "$DISTRO" in
        centos7    ) QCOW=CentOS-7-x86_64-GenericCloud.qcow2 ;;
        centos6    ) QCOW=CentOS-6-x86_64-GenericCloud.qcow2 ;;
        debian8    ) QCOW=debian-8-openstack-amd64.qcow2 ;;
        ubuntu ) QCOW=ubuntu-16.04-server-cloudimg-amd64-disk1.img ;;
        *          ) echo "Distro ${DISTRO} not available"; exit 2 ;;
    esac

    mkdir -p ${IMAGEDIR}

    if [ "${DISTRO}" == "centos7" ]
    then
        OS_VARIANT="centos7.0"
        ISO_URL=https://cloud.centos.org/centos/7/images
        LOGIN_USER=centos
    elif [ "${DISTRO}" == "centos6" ]
    then
        OS_VARIANT="centos6.9"
        ISO_URL=https://cloud.centos.org/centos/6/images
        LOGIN_USER=centos
    elif [ "${DISTRO}" == "debian8" ]
    then
        OS_VARIANT="debian8"
        ISO_URL=https://cdimage.debian.org/cdimage/openstack/current-8
        LOGIN_USER=debian
    elif [ "${DISTRO}" == "ubuntu" ]
    then
        OS_VARIANT="ubuntuquantal"
        ISO_URL=https://cloud-images.ubuntu.com/releases/16.04/release
        LOGIN_USER=ubuntu
    fi

    if [ ! -f ${IMAGEDIR}/${QCOW} ]
    then
        echo "wget -P ${IMAGEDIR} ${ISO_URL}/${QCOW}"
        wget -P ${IMAGEDIR} ${UBUNTU16_URL}/${QCOW}
    fi

    IMAGE=${IMAGEDIR}/${QCOW}
}

function check_ssh_key {
    if [ ! -f "${PUBKEY}" ]
    then
        echo "[ERROR] Please generate an SSH keypair using 'ssh-keygen -t rsa' or specify one with the "-k" flag."
        exit 3
    else
        KEY=$(<${PUBKEY})
    fi
}

USER_DATA=user-data
META_DATA=meta-data
CI_ISO=${VMNAME}-cidata.iso

check_ssh_key
fetch_images

virsh dominfo ${VMNAME} > /dev/null 2>&1

if [ "$?" -eq 0 ]; then
    echo -n "VM already exists. To delete, run vm-rm ${VMNAME}"
    exit 1
fi

rm -rf ${VMDIR}/${VMNAME}
mkdir -p ${VMDIR}/${VMNAME}

pushd ${VMDIR}/${VMNAME} > /dev/null

    # Create log file
    touch ${VMNAME}.log

    # cloud-init config: set hostname, remove cloud-init package,
    # and add ssh-key
    cat > $USER_DATA << _EOF_
#cloud-config

# Hostname management
preserve_hostname: False
hostname: ${VMNAME}
fqdn: ${VMNAME}.example.local

# Configure where output will go
output:
  all: ">> /var/log/cloud-init.log"

# configure interaction with ssh server
ssh_genkeytypes: ['ed25519', 'rsa']

# Install my public ssh key to the first user-defined user configured
# in cloud.cfg in the template (which is centos for CentOS cloud images)
ssh_authorized_keys:
  - ${KEY}
_EOF_
    if [ "${DISTRO}" == "centos6" -o "${DISTRO}" == "centos7" ]
    then
        cat >> $USER_DATA << _EOF_
# Remove cloud-init when finished with it
runcmd:
  - [ yum, -y, remove, cloud-init ]
_EOF_
    else
        cat >> $USER_DATA << _EOF_
# Remove cloud-init when finished with it
runcmd:
  - [ apt-get, -y, remove, cloud-init ]
_EOF_
    fi

    echo "instance-id: ${VMNAME}; local-hostname: ${VMNAME}" > $META_DATA

    DISK=${VMNAME}.qcow2
    echo "cp ${IMAGE} ${DISK}"
    cp $IMAGE $DISK

    echo "qemu-img create -f qcow2 -o preallocation=metadata ${DISK}.new 20G"
    qemu-img create -f qcow2 -o preallocation=metadata $DISK.new 20G

    # sudo apt install libguestfs-tools
    # sudo update-guestfs-appliance
    echo "virt-resize --expand /dev/sda1 ${DISK} ${DISK}.new"

    if [ `id -u` -eq 0 ]; then
        virt-resize --expand /dev/sda1 $DISK $DISK.new
    else
        sudo virt-resize --expand /dev/sda1 $DISK $DISK.new
    fi

    mv $DISK $DISK.backup
    mv $DISK.new $DISK

    echo "genisoimage -output ${CI_ISO} -volid cidata -joliet -r ${USER_DATA} ${META_DATA}"

    genisoimage -output $CI_ISO -volid cidata -joliet -r $USER_DATA $META_DATA

    echo "Installing the domain and adjusting the configuration..."
    echo "[INFO] Installing with the following parameters:"
    echo "    virt-install \\"
    echo "      --import \\"
    echo "      --name ${VMNAME} \\"
    echo "      --ram ${MEMORY} \\"
    echo "      --vcpus ${CPUS} \\"
    echo "      --cpu ${FEATURE} \\"
    echo "      --disk $DISK,format=qcow2,bus=virtio \\"
    echo "      --disk $CI_ISO,device=cdrom \\"
    if [ -z "${MACADDRESS}" ]
    then
        echo "      --network bridge=${BRIDGE},model=virtio \\"
    else
        echo "      --network bridge=${BRIDGE},model=virtio,mac=${MACADDRESS} \\"
    fi
    echo "      --os-type=linux \\"
    echo "      --os-variant=${OS_VARIANT} \\"
    echo "      --graphics vnc,listen=0.0.0.0 \\"
    echo "      --noautoconsole "

    if [ -z "${MACADDRESS}" ]
    then
        virt-install --import \
            --name ${VMNAME} \
            --ram ${MEMORY} \
            --vcpus ${CPUS} \
            --cpu ${FEATURE} \
            --disk $DISK,format=qcow2,bus=virtio \
            --disk $CI_ISO,device=cdrom \
            --network bridge=${BRIDGE},model=virtio \
            --os-type=linux \
            --os-variant=${OS_VARIANT} \
            --graphics vnc,listen=0.0.0.0 \
            --noautoconsole
    else
        virt-install --import \
            --name ${VMNAME} \
            --ram ${MEMORY} \
            --vcpus ${CPUS} \
            --cpu ${FEATURE} \
            --disk $DISK,format=qcow2,bus=virtio \
            --disk $CI_ISO,device=cdrom \
            --network bridge=${BRIDGE},model=virtio,mac=${MACADDRESS} \
            --os-type=linux \
            --os-variant=${OS_VARIANT} \
            --graphics vnc,listen=0.0.0.0 \
            --noautoconsole
    fi

    RET=$?

    if [ "$RET" -ne 0 ]; then
        echo "[ERROR] virt-install failed."
        exit 3
    fi
    virsh dominfo ${VMNAME} >> ${VMNAME}.log 2>&1

    virsh change-media ${VMNAME} hda --eject --config >> ${VMNAME}.log

    MAC=$(virsh dumpxml ${VMNAME} | awk -F\' '/mac address/ {print $2}')

    sleep 5

    while true
    do
        if [ -f /var/lib/libvirt/dnsmasq/default.leases ]; then
           IP=$(grep -B1 $MAC /var/lib/libvirt/dnsmasq/default.leases | \
              head -n 1 | awk '{print $3}' | sed -e s/\"//g -e s/,//)
        else
            IP=$(virsh net-dhcp-leases default | grep $MAC | awk '{print $5}' | awk -F "/" '{print $1}')
        fi

        if [ "$IP" = "" ]
        then
            sleep 1
        else
            break
        fi
    done

    echo ""
    echo "ssh ${LOGIN_USER}@${IP}"
    echo ""

popd > /dev/null

